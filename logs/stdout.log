

[00:07:24]: Request(test)[ImmutableMultiDict([('email', ''), ('servicio', 'test'), ('train_extension', 'onnx'), ('test_extension', 'csv'), ('terms', 'Acepto')])]
 -> Request(test)[train.onnx: 5855 bytes]
 -> Request(test)[test.csv: 3902 bytes]
[00:07:24]: Response(test)[{'accuracy': 0.9726027397260274, 'macro avg': {'precision': 0.9732999582811847, 'recall': 0.9727891156462585, 'f1-score': 0.9725736748932624, 'support': 146}, 'weighted avg': {'precision': 0.9735199821694925, 'recall': 0.9726027397260274, 'f1-score': 0.9725933783535111, 'support': 146}, 'by classes': {'Setosa': {'precision': 1.0, 'recall': 0.9795918367346939, 'f1-score': 0.9896907216494846, 'support': 49}, 'Versicolor': {'precision': 0.9787234042553191, 'recall': 0.9387755102040817, 'f1-score': 0.9583333333333333, 'support': 49}, 'Virginica': {'precision': 0.9411764705882353, 'recall': 1.0, 'f1-score': 0.9696969696969697, 'support': 48}}, 'error score': 0.0273972602739726, 'predictions': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 'trues': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]}]


[00:19:52]: Request(train)[ImmutableMultiDict([('servicio', 'train'), ('train_extension', 'csv'), ('terms', 'Acepto')])]
 -> Request(train)[flores-train.csv.csv: 3902  bytes]
-- Finished evolution with the generation 10 in 26.92 seconds.
Initial population fitness values:
[['0', '63.333333333333336', '69.0'], ['1', '63.333333333333336', '118.0'], ['2', '63.333333333333336', '133.0'], ['3', '63.333333333333336', '141.0'], ['4', '63.333333333333336', '164.0'], ['5', '73.33333333333333', '63.0'], ['6', '73.33333333333333', '75.0'], ['7', '73.33333333333333', '128.0'], ['8', '73.33333333333333', '129.0'], ['9', '73.33333333333333', '149.0']]
Final population fitness values:
[['0', '26.66666666666667', '31.0'], ['1', '26.66666666666667', '59.0'], ['2', '26.66666666666667', '59.0'], ['3', '26.66666666666667', '59.0'], ['4', '26.66666666666667', '89.0'], ['5', '36.66666666666667', '43.0'], ['6', '63.333333333333336', '56.0'], ['7', '63.333333333333336', '60.0'], ['8', '63.333333333333336', '83.0'], ['9', '73.33333333333333', '44.0']]
Final population layer neurons statistics:
[['Statistic', 'Hidden layer 0', 'Hidden layer 1', 'Hidden layer 2', 'Hidden layer 3'], ['Max', 28, 25, 16, 29], ['Mean', 27.9, 12.5, 9.6, 5.3], ['Min', 27, 0, 0, 0], ['Std', 0.29999999999999993, 5.608029957123981, 7.83836717690617, 10.658799181896617]]
[00:20:19]: Response(train)[(26.66666666666667, 31, 2, 0.8664474685986837) alongside File[1444 bytes]]


[00:22:22]: Request(classify)[ImmutableMultiDict([('servicio', 'classify'), ('train_extension', 'onnx'), ('test_extension', 'csv'), ('terms', 'Acepto')]), ImmutableMultiDict([('test', <FileStorage: 'test' ('text/csv')>), ('train', <FileStorage: 'train' ('application/octet-stream')>)])]
 -> Request(classify)[train.onnx: 5855 bytes]
 -> Request(classify)[test.csv: 3902 bytes]
[00:22:22]: Exception(classify)[mat1 and mat2 shapes cannot be multiplied (1x5 and 4x14)]


[02:48:21]: Request(train)[ImmutableMultiDict([('servicio', 'train'), ('train_extension', 'csv'), ('terms', 'Acepto')])]
 -> Request(train)[ropa-train.csv.csv: 1766052  bytes]
Using cpu device


[00:18:08]: Request(test)[ImmutableMultiDict([('servicio', 'test'), ('train_extension', 'onnx'), ('test_extension', 'csv'), ('terms', 'Acepto')])]
 -> Request(test)[train.onnx: 5855 bytes]
 -> Request(test)[test.csv: 3902 bytes]
[00:18:08]: Response(test)[{'accuracy': 0.9726027397260274, 'macro avg': {'precision': 0.9732999582811847, 'recall': 0.9727891156462585, 'f1-score': 0.9725736748932624, 'support': 146}, 'weighted avg': {'precision': 0.9735199821694925, 'recall': 0.9726027397260274, 'f1-score': 0.9725933783535111, 'support': 146}, 'by classes': {'Setosa': {'precision': 1.0, 'recall': 0.9795918367346939, 'f1-score': 0.9896907216494846, 'support': 49}, 'Versicolor': {'precision': 0.9787234042553191, 'recall': 0.9387755102040817, 'f1-score': 0.9583333333333333, 'support': 49}, 'Virginica': {'precision': 0.9411764705882353, 'recall': 1.0, 'f1-score': 0.9696969696969697, 'support': 48}}, 'error score': 0.0273972602739726, 'predictions': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 'trues': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]}]


[02:08:09]: Request(train)[ImmutableMultiDict([('servicio', 'train'), ('train_extension', 'csv'), ('terms', 'Acepto')])]
 -> Request(train)[flores-train.csv.csv: 3902  bytes]
-- Finished evolution with the generation 10 in 29.23 seconds.
Initial population fitness values:
[['0', '26.66666666666667', '119.0'], ['1', '56.666666666666664', '138.0'], ['2', '56.666666666666664', '149.0'], ['3', '56.666666666666664', '163.0'], ['4', '70.0', '83.0'], ['5', '70.0', '117.0'], ['6', '70.0', '147.0'], ['7', '70.0', '170.0'], ['8', '70.0', '182.0'], ['9', '73.33333333333333', '135.0']]
Final population fitness values:
[['0', '6.666666666666671', '116.0'], ['1', '26.66666666666667', '92.0'], ['2', '26.66666666666667', '119.0'], ['3', '26.66666666666667', '119.0'], ['4', '30.0', '90.0'], ['5', '30.0', '115.0'], ['6', '56.666666666666664', '92.0'], ['7', '56.666666666666664', '92.0'], ['8', '56.666666666666664', '119.0'], ['9', '73.33333333333333', '62.0']]
Final population layer neurons statistics:
[['Statistic', 'Hidden layer 0', 'Hidden layer 1', 'Hidden layer 2', 'Hidden layer 3', 'Hidden layer 4'], ['Max', 21, 26, 13, 29, 27], ['Mean', 21.0, 25.7, 13.0, 26.0, 12.9], ['Min', 21, 25, 13, 0, 0], ['Std', 0.0, 0.45825756949558405, 0.0, 8.67179335547152, 12.941792766073794]]
[02:08:39]: Response(train)[(6.666666666666671, 116, 6, 0.6215640306472778) alongside File[9993 bytes]]

Using cpu device

[00:01:09]: Request(test)[ImmutableMultiDict([('email', ''), ('servicio', 'test'), ('train_extension', 'onnx'), ('test_extension', 'csv'), ('terms', 'Acepto')])]
 -> Request(test)[train.onnx: 10766 bytes]
 -> Request(test)[test.csv: 359 bytes]
[00:01:09]: Response(test)[{'accuracy': 0.4444444444444444, 'macro avg': {'precision': 0.225, 'recall': 0.41666666666666663, 'f1-score': 0.28571428571428575, 'support': 9}, 'weighted avg': {'precision': 0.25555555555555554, 'recall': 0.4444444444444444, 'f1-score': 0.3174603174603175, 'support': 9}, 'by classes': {0: {'precision': 0.0, 'recall': 0.0, 'f1-score': 0.0, 'support': 2}, 1: {'precision': 0.0, 'recall': 0.0, 'f1-score': 0.0, 'support': 2}, 2: {'precision': 0.5, 'recall': 0.6666666666666666, 'f1-score': 0.5714285714285715, 'support': 3}, 3: {'precision': 0.4, 'recall': 1.0, 'f1-score': 0.5714285714285715, 'support': 2}}, 'error score': 0.5555555555555556, 'predictions': [2, 2, 2, 3, 3, 3, 3, 3, 2], 'trues': [0, 1, 2, 0, 1, 2, 3, 3, 2]}]


[00:02:28]: Request(test)[ImmutableMultiDict([('email', 'ldeniz001@ikasle.ehu.eus'), ('servicio', 'test'), ('train_extension', 'onnx'), ('test_extension', 'csv'), ('terms', 'Acepto')])]
 -> Request(test)[train.onnx: 5855 bytes]
 -> Request(test)[test.csv: 3902 bytes]
[00:02:29]: Response(test)[{'accuracy': 0.9726027397260274, 'macro avg': {'precision': 0.9732999582811847, 'recall': 0.9727891156462585, 'f1-score': 0.9725736748932624, 'support': 146}, 'weighted avg': {'precision': 0.9735199821694925, 'recall': 0.9726027397260274, 'f1-score': 0.9725933783535111, 'support': 146}, 'by classes': {'Setosa': {'precision': 1.0, 'recall': 0.9795918367346939, 'f1-score': 0.9896907216494846, 'support': 49}, 'Versicolor': {'precision': 0.9787234042553191, 'recall': 0.9387755102040817, 'f1-score': 0.9583333333333333, 'support': 49}, 'Virginica': {'precision': 0.9411764705882353, 'recall': 1.0, 'f1-score': 0.9696969696969697, 'support': 48}}, 'error score': 0.0273972602739726, 'predictions': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 'trues': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]}]


[00:09:05]: Request(test)[ImmutableMultiDict([('email', ''), ('servicio', 'test'), ('train_extension', 'onnx'), ('test_extension', 'csv'), ('terms', 'Acepto')])]
 -> Request(test)[train.onnx: 5855 bytes]
 -> Request(test)[test.csv: 3902 bytes]
[00:09:06]: Response(test)[{'accuracy': 0.9726027397260274, 'macro avg': {'precision': 0.9732999582811847, 'recall': 0.9727891156462585, 'f1-score': 0.9725736748932624, 'support': 146}, 'weighted avg': {'precision': 0.9735199821694925, 'recall': 0.9726027397260274, 'f1-score': 0.9725933783535111, 'support': 146}, 'by classes': {'Setosa': {'precision': 1.0, 'recall': 0.9795918367346939, 'f1-score': 0.9896907216494846, 'support': 49}, 'Versicolor': {'precision': 0.9787234042553191, 'recall': 0.9387755102040817, 'f1-score': 0.9583333333333333, 'support': 49}, 'Virginica': {'precision': 0.9411764705882353, 'recall': 1.0, 'f1-score': 0.9696969696969697, 'support': 48}}, 'error score': 0.0273972602739726, 'predictions': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 'trues': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]}]

Using cpu device

[02:59:13]: Request(train)[ImmutableMultiDict([('servicio', 'train'), ('train_extension', 'csv'), ('terms', 'Acepto')])]
 -> Request(train)[ropa-train.csv.csv: 1766052  bytes]
-- Finished evolution with the generation 2 in 273.01 seconds.
Initial population fitness values:
[['0', '84.80834838450733', '68.0'], ['1', '91.14990969295604', '115.0']]
Final population fitness values:
[['0', '83.0824804334738', '51.0'], ['1', '83.0824804334738', '66.0']]
Final population layer neurons statistics:
[['Statistic', 'Hidden layer 0', 'Hidden layer 1', 'Hidden layer 2', 'Hidden layer 3'], ['Max', 10, 18, 17, 14], ['Mean', 10.0, 18.0, 16.5, 7.0], ['Min', 10, 18, 16, 0], ['Std', 0.0, 0.0, 0.5, 7.0]]
[03:04:45]: Response(train)[(83.0824804334738, 51, 4, 1.9960167847558825) alongside File[3449 bytes]]


[03:25:50]: Request(train)[ImmutableMultiDict([('servicio', 'train'), ('train_extension', 'csv'), ('terms', 'Acepto')])]
 -> Request(train)[flores-train.csv.csv: 3902  bytes]
-- Finished evolution with the generation 2 in 1.93 seconds.
Initial population fitness values:
[['0', '56.666666666666664', '107.0'], ['1', '100.0', '177.0']]
Final population fitness values:
[['0', '43.333333333333336', '121.0'], ['1', '56.666666666666664', '140.0']]
Final population layer neurons statistics:
[['Statistic', 'Hidden layer 0', 'Hidden layer 1', 'Hidden layer 2', 'Hidden layer 3', 'Hidden layer 4', 'Hidden layer 5', 'Hidden layer 6'], ['Max', 27, 16, 14, 25, 22, 15, 18], ['Mean', 26.5, 16.0, 14.0, 25.0, 22.0, 15.0, 9.0], ['Min', 26, 16, 14, 25, 22, 15, 0], ['Std', 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0]]
[03:25:53]: Response(train)[(43.333333333333336, 121, 7, 0.9847779671351115) alongside File[9771 bytes]]


[03:28:45]: Request(train)[ImmutableMultiDict([('servicio', 'train'), ('train_extension', 'csv'), ('terms', 'Acepto')])]
 -> Request(train)[iris.csv.csv: 4561  bytes]
-- Finished evolution with the generation 2 in 2.20 seconds.
Initial population fitness values:
[['0', '63.333333333333336', '153.0'], ['1', '66.66666666666667', '160.0']]
Final population fitness values:
[['0', '63.333333333333336', '153.0'], ['1', '70.0', '165.0']]
Final population layer neurons statistics:
[['Statistic', 'Hidden layer 0', 'Hidden layer 1', 'Hidden layer 2', 'Hidden layer 3', 'Hidden layer 4', 'Hidden layer 5', 'Hidden layer 6', 'Hidden layer 7'], ['Max', 18, 26, 10, 27, 19, 20, 31, 11], ['Mean', 18.0, 26.0, 10.0, 27.0, 19.0, 20.0, 30.5, 5.5], ['Min', 18, 26, 10, 27, 19, 20, 30, 0], ['Std', 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 5.5]]
[03:28:48]: Response(train)[(63.333333333333336, 153, 8, 1.184778054555257) alongside File[12572 bytes]]

Using cpu device
Using cpu device
Using cpu device
Using cpu device

[03:31:17]: Request(train)[ImmutableMultiDict([('servicio', 'train'), ('train_extension', 'csv'), ('terms', 'Acepto')])]
 -> Request(train)[iris.csv.csv: 4561  bytes]
-- Finished evolution with the generation 6 in 8.14 seconds.
Initial population fitness values:
[['0', '73.33333333333333', '178.0'], ['1', '73.33333333333333', '221.0'], ['2', '73.33333333333333', '244.0'], ['3', '73.33333333333333', '246.0']]
Final population fitness values:
[['0', '53.333333333333336', '134.0'], ['1', '73.33333333333333', '115.0'], ['2', '73.33333333333333', '116.0'], ['3', '73.33333333333333', '116.0']]
Final population layer neurons statistics:
[['Statistic', 'Hidden layer 0', 'Hidden layer 1', 'Hidden layer 2', 'Hidden layer 3', 'Hidden layer 4'], ['Max', 40, 11, 29, 33, 19], ['Mean', 39.75, 11.0, 29.0, 32.75, 4.75], ['Min', 39, 11, 29, 32, 0], ['Std', 0.4330127018922193, 0.0, 0.0, 0.4330127018922193, 8.227241335952167]]
[03:31:25]: Response(train)[(53.333333333333336, 134, 6, 1.0847780307133992) alongside File[11665 bytes]]

Using cpu device
Using cpu device

[03:35:09]: Request(train)[ImmutableMultiDict([('servicio', 'train'), ('train_extension', 'csv'), ('terms', 'Acepto')])]
 -> Request(train)[iris.csv.csv: 4561  bytes]
Using cpu device
Using cpu device
Using cpu device
Using cpu device

[03:45:54]: Request(train)[ImmutableMultiDict([('servicio', 'train'), ('train_extension', 'csv'), ('terms', 'Acepto')])]
 -> Request(train)[iris.csv.csv: 4561  bytes]
Using cpu device
Using cpu device
Using cpu device
Using cpu device

[04:02:19]: Request(train)[ImmutableMultiDict([('servicio', 'train'), ('train_extension', 'csv'), ('terms', 'Acepto')])]
 -> Request(train)[iris.csv.csv: 4561  bytes]
Using cpu device

[22:55:09]: Request(train)[ImmutableMultiDict([('servicio', 'train'), ('train_extension', 'csv'), ('terms', 'Acepto')])]
 -> Request(train)[iris.csv.csv: 4561  bytes]
-- Finished evolution with the generation 10 in 264.39 seconds.
Initial population fitness values:
[['0', '23.33333333333333', '84.0'], ['1', '43.333333333333336', '104.0'], ['2', '56.666666666666664', '128.0'], ['3', '63.333333333333336', '100.0'], ['4', '63.333333333333336', '122.0'], ['5', '63.333333333333336', '148.0'], ['6', '63.333333333333336', '159.0'], ['7', '80.0', '86.0'], ['8', '80.0', '135.0'], ['9', '80.0', '181.0']]
Final population fitness values:
[['0', '23.33333333333333', '84.0'], ['1', '26.66666666666667', '46.0'], ['2', '36.66666666666667', '44.0'], ['3', '36.66666666666667', '45.0'], ['4', '36.66666666666667', '47.0'], ['5', '36.66666666666667', '73.0'], ['6', '36.66666666666667', '74.0'], ['7', '43.333333333333336', '19.0'], ['8', '43.333333333333336', '19.0'], ['9', '56.666666666666664', '73.0']]
Final population layer neurons statistics:
[['Statistic', 'Hidden layer 0', 'Hidden layer 1', 'Hidden layer 2', 'Hidden layer 3'], ['Max', 16, 29, 29, 11], ['Mean', 14.2, 22.5, 11.6, 1.1], ['Min', 13, 0, 0, 0], ['Std', 1.4696938456699067, 11.262770529492288, 14.207040508142432, 3.2999999999999994]]
[22:59:38]: Response(train)[(23.33333333333333, 84, 5, 0.7917017141977946) alongside File[7599 bytes]]


[23:23:58]: Request(test)[ImmutableMultiDict([('servicio', 'test'), ('train_extension', 'onnx'), ('test_extension', 'csv'), ('terms', 'Acepto')])]
 -> Request(test)[train.onnx: 10657 bytes]
 -> Request(test)[test.csv: 2605387 bytes]
[23:23:59]: Response(test)[{'accuracy': 0.6375838926174496, 'macro avg': {'precision': 0.4257854821235103, 'recall': 0.6398639455782312, 'f1-score': 0.5109216719810851, 'support': 149}, 'weighted avg': {'precision': 0.4245130047190734, 'recall': 0.6375838926174496, 'f1-score': 0.5092774851365888, 'support': 149}, 'by classes': {'Setosa': {'precision': 0.0, 'recall': 0.0, 'f1-score': 0.0, 'support': 50}, 'Versicolor': {'precision': 0.6619718309859155, 'recall': 0.94, 'f1-score': 0.7768595041322315, 'support': 50}, 'Virginica': {'precision': 0.6153846153846154, 'recall': 0.9795918367346939, 'f1-score': 0.7559055118110237, 'support': 49}}, 'error score': 0.36241610738255037, 'predictions': [2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 'trues': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]}]


[23:24:57]: Request(test)[ImmutableMultiDict([('servicio', 'test'), ('train_extension', 'onnx'), ('test_extension', 'csv'), ('terms', 'Acepto')])]
 -> Request(test)[train.onnx: 10657 bytes]
 -> Request(test)[test.csv: 2605387 bytes]
[23:24:58]: Response(test)[{'accuracy': 0.6375838926174496, 'macro avg': {'precision': 0.4257854821235103, 'recall': 0.6398639455782312, 'f1-score': 0.5109216719810851, 'support': 149}, 'weighted avg': {'precision': 0.4245130047190734, 'recall': 0.6375838926174496, 'f1-score': 0.5092774851365888, 'support': 149}, 'by classes': {'Setosa': {'precision': 0.0, 'recall': 0.0, 'f1-score': 0.0, 'support': 50}, 'Versicolor': {'precision': 0.6619718309859155, 'recall': 0.94, 'f1-score': 0.7768595041322315, 'support': 50}, 'Virginica': {'precision': 0.6153846153846154, 'recall': 0.9795918367346939, 'f1-score': 0.7559055118110237, 'support': 49}}, 'error score': 0.36241610738255037, 'predictions': [2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 'trues': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]}]


[23:25:48]: Request(test)[ImmutableMultiDict([('servicio', 'test'), ('train_extension', 'onnx'), ('test_extension', 'csv'), ('terms', 'Acepto')])]
 -> Request(test)[train.onnx: 10657 bytes]
 -> Request(test)[test.csv: 2605387 bytes]
[23:25:49]: Response(test)[{'accuracy': 0.6193548387096774, 'macro avg': {'precision': 0.41305555555555556, 'recall': 0.64, 'f1-score': 0.501948717948718, 'support': 155}, 'weighted avg': {'precision': 0.39973118279569897, 'recall': 0.6193548387096774, 'f1-score': 0.48575682382134, 'support': 155}, 'by classes': {'Setosa': {'precision': 0.0, 'recall': 0.0, 'f1-score': 0.0, 'support': 55}, 'Versicolor': {'precision': 0.6266666666666667, 'recall': 0.94, 'f1-score': 0.752, 'support': 50}, 'Virginica': {'precision': 0.6125, 'recall': 0.98, 'f1-score': 0.7538461538461539, 'support': 50}}, 'error score': 0.38064516129032255, 'predictions': [2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2], 'trues': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2]}]


[23:26:38]: Request(test)[ImmutableMultiDict([('servicio', 'test'), ('train_extension', 'onnx'), ('test_extension', 'csv'), ('terms', 'Acepto')])]
 -> Request(test)[train.onnx: 10657 bytes]
 -> Request(test)[test.csv: 3661291 bytes]
[23:26:39]: Response(test)[{'accuracy': 0.6193548387096774, 'macro avg': {'precision': 0.41305555555555556, 'recall': 0.64, 'f1-score': 0.501948717948718, 'support': 155}, 'weighted avg': {'precision': 0.39973118279569897, 'recall': 0.6193548387096774, 'f1-score': 0.48575682382134, 'support': 155}, 'by classes': {'Setosa': {'precision': 0.0, 'recall': 0.0, 'f1-score': 0.0, 'support': 55}, 'Versicolor': {'precision': 0.6266666666666667, 'recall': 0.94, 'f1-score': 0.752, 'support': 50}, 'Virginica': {'precision': 0.6125, 'recall': 0.98, 'f1-score': 0.7538461538461539, 'support': 50}}, 'error score': 0.38064516129032255, 'predictions': [2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2], 'trues': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2]}]
Using cpu device

[23:17:31]: Request(test)[ImmutableMultiDict([('servicio', 'test'), ('train_extension', 'onnx'), ('test_extension', 'csv'), ('terms', 'Acepto')])]
 -> Request(test)[train.onnx: 10657 bytes]
 -> Request(test)[test.csv: 2 bytes]
[23:17:31]: Exception(test)[No columns to parse from file]


[23:18:03]: Request(test)[ImmutableMultiDict([('servicio', 'test'), ('train_extension', 'onnx'), ('test_extension', 'csv'), ('terms', 'Acepto')])]
 -> Request(test)[train.onnx: 10657 bytes]
 -> Request(test)[test.csv: 3979 bytes]
[23:18:03]: Response(test)[{'accuracy': 0.6375838926174496, 'macro avg': {'precision': 0.4257854821235103, 'recall': 0.6398639455782312, 'f1-score': 0.5109216719810851, 'support': 149}, 'weighted avg': {'precision': 0.4245130047190734, 'recall': 0.6375838926174496, 'f1-score': 0.5092774851365888, 'support': 149}, 'by classes': {'Setosa': {'precision': 0.0, 'recall': 0.0, 'f1-score': 0.0, 'support': 50}, 'Versicolor': {'precision': 0.6619718309859155, 'recall': 0.94, 'f1-score': 0.7768595041322315, 'support': 50}, 'Virginica': {'precision': 0.6153846153846154, 'recall': 0.9795918367346939, 'f1-score': 0.7559055118110237, 'support': 49}}, 'error score': 0.36241610738255037, 'predictions': [2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 'trues': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]}]


[23:22:04]: Request(test)[ImmutableMultiDict([('servicio', 'test'), ('train_extension', 'onnx'), ('test_extension', 'csv'), ('terms', 'Acepto')])]
 -> Request(test)[train.onnx: 10657 bytes]
 -> Request(test)[test.csv: 2 bytes]
[23:22:04]: Exception(test)[No columns to parse from file]


[21:28:25]: Request(train)[ImmutableMultiDict([('servicio', 'train'), ('train_extension', 'csv'), ('terms', 'Acepto')])]
 -> Request(train)[iris.csv.csv: 4561  bytes]
